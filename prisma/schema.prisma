generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider    = "postgresql"
    url         = env("DATABASE_URL")
}

model User {
    id              String      @id @default(cuid())
    name            String?
    username        String      @unique
    email           String?     @unique
    emailVerified   DateTime?
    image           String?
    password        String?
    accounts        Account[]
    sessions        Session[]
    post            Post[]
    likes           Like[]
    bookmarks       Bookmark[]
    comments        Comment[]
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    @@index([username])
}

model Account {
    id                  String  @id @default(cuid())
    userId              String
    type                String
    provider            String
    providerAccountId   String
    refresh_token       String? @db.Text
    access_token        String? @db.Text
    expires_at          Int?
    token_type          String?
    scope               String?
    id_token            String? @db.Text
    session_state       String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id              String      @id @default(cuid())
    sessionToken    String      @unique
    userId          String
    expires         DateTime
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier      String
    token           String      @unique
    expires         DateTime

    @@unique([identifier, token])
}

model Post {
    id              String      @id @default(cuid())
    content         String
    authorId        String
    author          User        @relation(fields: [authorId], references: [id])
    likes           Like[]
    bookmarks       Bookmark[]
    comments        Comment[]
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
}

model Like {
    id              String      @id @default(cuid())
    postId          String
    userId          String
    createdAt       DateTime    @default(now())
    post            Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([postId, userId])
}

model Bookmark {
    id              String      @id @default(cuid())
    postId          String
    userId          String
    createdAt       DateTime    @default(now())
    post            Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([postId, userId])
}

model Comment {
    id              String      @id @default(cuid())
    content         String
    postId          String
    userId          String
    parentId        String?     // For nested replies
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    // Relations
    post            Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    parent          Comment?    @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies         Comment[]   @relation("CommentReplies")

    @@index([postId])
    @@index([userId])
    @@index([parentId])
}